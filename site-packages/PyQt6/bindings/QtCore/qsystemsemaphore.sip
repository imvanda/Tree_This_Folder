// qsystemsemaphore.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2023 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSystemSemaphore
{
%TypeHeaderCode
#include <qsystemsemaphore.h>
%End

public:
    enum AccessMode
    {
        Open,
        Create,
    };

    enum SystemSemaphoreError
    {
        NoError,
        PermissionDenied,
        KeyError,
        AlreadyExists,
        NotFound,
        OutOfResources,
        UnknownError,
    };

%If (Qt_6_6_0 -)
    QSystemSemaphore(const QNativeIpcKey &key, int initialValue = 0, QSystemSemaphore::AccessMode mode = QSystemSemaphore::Open);
%End
    QSystemSemaphore(const QString &key, int initialValue = 0, QSystemSemaphore::AccessMode mode = QSystemSemaphore::Open);
    ~QSystemSemaphore();
    void setKey(const QString &key, int initialValue = 0, QSystemSemaphore::AccessMode mode = QSystemSemaphore::Open);
    QString key() const;
    bool acquire();
    bool release(int n = 1);
    QSystemSemaphore::SystemSemaphoreError error() const;
    QString errorString() const;
%If (Qt_6_6_0 -)
    void setNativeKey(const QNativeIpcKey &key, int initialValue = 0, QSystemSemaphore::AccessMode mode = QSystemSemaphore::Open);
%End
%If (Qt_6_6_0 -)
    void setNativeKey(const QString &key, int initialValue = 0, QSystemSemaphore::AccessMode mode = QSystemSemaphore::Open, QNativeIpcKey::Type type = QNativeIpcKey::legacyDefaultTypeForOs());
%End
%If (Qt_6_6_0 -)
    QNativeIpcKey nativeIpcKey() const;
%End
%If (Qt_6_6_0 -)
    static bool isKeyTypeSupported(QNativeIpcKey::Type type);
%End
%If (Qt_6_6_0 -)
    static QNativeIpcKey platformSafeKey(const QString &key, QNativeIpcKey::Type type = QNativeIpcKey::DefaultTypeForOs);
%End
%If (Qt_6_6_0 -)
    static QNativeIpcKey legacyNativeKey(const QString &key, QNativeIpcKey::Type type = QNativeIpcKey::legacyDefaultTypeForOs());
%End

private:
    QSystemSemaphore(const QSystemSemaphore &);
};
