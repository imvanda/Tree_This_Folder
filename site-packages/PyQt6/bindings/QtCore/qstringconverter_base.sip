// qstringconverter_base.sip generated by MetaSIP
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2023 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt6.
// 
// This file may be used under the terms of the GNU General Public License
// version 3.0 as published by the Free Software Foundation and appearing in
// the file LICENSE included in the packaging of this file.  Please review the
// following information to ensure the GNU General Public License version 3.0
// requirements will be met: http://www.gnu.org/copyleft/gpl.html.
// 
// If you do not wish to use this file under the terms of the GPL version 3.0
// then you may purchase a commercial license.  For more information contact
// info@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_6_4_0 -)

class QStringConverterBase
{
%TypeHeaderCode
#include <qstringconverter_base.h>
%End

public:
    enum class Flag /BaseType=Flag/
    {
        Default,
        Stateless,
        ConvertInvalidToNull,
        WriteBom,
        ConvertInitialBom,
        UsesIcu,
    };

    typedef QFlags<QStringConverterBase::Flag> Flags;

protected:
    ~QStringConverterBase();
};

%End
%If (Qt_6_4_0 -)

class QStringConverter : QStringConverterBase
{
%TypeHeaderCode
#include <qstringconverter_base.h>
%End

public:
    enum Encoding
    {
        Utf8,
        Utf16,
        Utf16LE,
        Utf16BE,
        Utf32,
        Utf32LE,
        Utf32BE,
        Latin1,
        System,
    };

protected:
    QStringConverter();
    QStringConverter(QStringConverter::Encoding encoding, QStringConverterBase::Flags f);
    QStringConverter(const char *name, QStringConverterBase::Flags f);
    ~QStringConverter();

public:
    bool isValid() const;
    void resetState();
    bool hasError() const;
    const char *name() const;
    static const char *nameForEncoding(QStringConverter::Encoding e);

private:
    QStringConverter(const QStringConverter &);
};

%End
